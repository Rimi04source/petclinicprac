name: CI-CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - uses: actions/checkout@v4
    - name: Set up JDK 11 for x64
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        architecture: x64

    - name: Setup Maven Action
      uses: s4u/setup-maven-action@v1.7.0
      with:
        checkout-fetch-depth: 0
        java-version: 11
        java-distribution: temurin
        maven-version: 3.8.1

    # 1. Install detect-secrets
    - name: Install detect-secrets
      run: |
        python -m pip install --upgrade pip
        pip install detect-secrets
    - name: Run detect-secrets scan to create baseline
      run: |
        if [ ! -f .secrets-baseline ]; then
        echo "No baseline file found, running initial scan to create it..."
        detect-secrets scan --all-files --baseline .secrets-baseline
        else
        echo "Baseline file found, skipping initial scan."
        fi


    # 3. Upload .secrets-baseline (optional, so you can store the baseline)
    - name: Upload .secrets-baseline
      uses: actions/upload-artifact@v4
      with:
        name: secrets-baseline
        path: .secrets-baseline

    # 4. Optional: Check for secrets in the repository after the scan
    - name: Check for detected secrets
      run: |
        if [ -f .secrets-baseline ]; then
          echo "Secrets baseline file exists."
        else
          echo "No baseline file found."
          exit 1
        fi

    - name: Compile project
      run: mvn clean compile

    - name: Run unit tests
      run: mvn test

    - name: SonarQube Analysis
      env:
        SONARQUBE_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        curl -sSLo sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner-cli.zip
        ./sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner \
          -Dsonar.projectName=Petclinic \
          -Dsonar.projectKey=Petclinic \
          -Dsonar.java.binaries=. \
          -Dsonar.host.url=http://4.247.31.109:9000 \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
    - name: Wait for Quality Gate to be ready
      run: |
        echo "Waiting for SonarQube Quality Gate result..."
        sleep 15 # Wait for 15 seconds for the analysis to complete

    - name: Check SonarQube Quality Gate status
      run: |
        response=$(curl -s -u ${{ secrets.SONAR_TOKEN }} "http://4.247.31.109:9000/api/qualitygates/project_status?projectKey=Petclinic")
        echo "API Response: $response"
        RESULT=$(echo $response | jq -r '.projectStatus.status')
        echo "Quality Gate status: $RESULT"
        if [ "$RESULT" != "OK" ]; then
          echo "Quality Gate failed!"
          exit 1
        else
          echo "Quality Gate passed!"
        fi
    - name: Build and package application
      run: mvn clean install
    # - name: Download OWASP Dependency Check
    #   run: |
    #     VERSION=$(curl -s https://jeremylong.github.io/DependencyCheck/current.txt)
    #     curl -sL "https://github.com/jeremylong/DependencyCheck/releases/download/v$VERSION/dependency-check-$VERSION-release.zip" --output dependency-check.zip
    #     unzip dependency-check.zip
    # - name: Run Dependency Check
    #   run: |
    #     ./dependency-check/bin/dependency-check.sh --out report.html --scan .
    #     rm -rf dependency-check*

    # - name: Upload Artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: artifacts
    #     path: report.html

    # # Optionally, you can publish it as an HTML file in the workflow output
    # - name: Publish Dependency Check Report (HTML)
    #   run: |
    #     echo "Dependency Check HTML Report:"
    #     cat ./dependency-check-report/*.html
    - name: Docker login
      uses: azure/docker-login@v2
      with:
        login-server: gitpracacr.azurecr.io
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Verify Docker login
      run: |
        docker info  # Verify that the login was successful
    - run: |
        docker build . -t gitpracacr.azurecr.io/petclinic:${{ github.sha }} 
        docker push gitpracacr.azurecr.io/petclinic:${{ github.sha }} 
    - name: Install Trivy
      run: |
        curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.38.3/trivy_0.38.3_Linux-64bit.tar.gz | tar -xz -C /usr/local/bin

    - name: Run Trivy security scan
      run: |
        docker pull gitpracacr.azurecr.io/petclinic:${{ github.sha }}  # Make sure the image exists
        trivy image --exit-code 0 --severity HIGH,CRITICAL --no-progress gitpracacr.azurecr.io/petclinic:${{ github.sha }}
