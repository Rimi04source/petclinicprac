# .github/workflows/sonar-scanner.yml
name: SonarQube Analysis

on:
  workflow_call:

jobs:
  sonar-analysis:
    runs-on: [self-hosted, linux, x64]

    steps:
    - name: SonarQube Analysis
      env:
        SONARQUBE_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}        # Use secret for SonarQube host URL
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}  # Use secret for project key
        SONAR_PROJECT_NAME: ${{ secrets.SONAR_PROJECT_NAME }} # Use secret for project name
      run: |
        curl -sSLo sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner-cli.zip
        ./sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner \
          -Dsonar.projectName=${{ secrets.SONAR_PROJECT_NAME }} \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.java.binaries=. \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

    - name: Wait for Quality Gate to be ready
      run: |
        echo "Waiting for SonarQube Quality Gate result..."
        sleep 15 # Wait for 15 seconds for the analysis to complete

    - name: Check SonarQube Quality Gate status
      run: |
        response=$(curl -s --max-time 400 -u ${{ secrets.SONAR_TOKEN }} "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}")
        echo "API Response: $response"
        RESULT=$(echo $response | jq -r '.projectStatus.status')
        echo "Quality Gate status: $RESULT"
        if [ "$RESULT" != "OK" ]; then
          echo "Quality Gate failed, but continuing the pipeline."
          exit 0  # This ensures the pipeline does not fail, even if the quality gate fails
        else
          echo "Quality Gate passed!"
        fi
